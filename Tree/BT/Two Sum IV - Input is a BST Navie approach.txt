/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        // Brute force Tc- O(N)+O(N)
        if(root==null)
            return false;
        ArrayList<Integer> inorder=new ArrayList<>();
        getInorder(root,inorder);
        
        
        int i=0,j=inorder.size()-1;
        while(i<j)
        {
            int sum= inorder.get(i)+inorder.get(j);
            if(sum==k)
            {
                return true;
            }
            else if(sum > k)
            {
                j--;
            }
            else
            {
                i++;
            }
        }
        return false;
    }
    public static void getInorder(TreeNode root, ArrayList<Integer> in)
    {
        Stack<TreeNode> stack=new Stack<>();
        
        while(true)
        {
            if(root!= null)
            {
                stack.push(root);
                root=root.left;
            }
            else
            {
                if(stack.isEmpty())
                {
                    break;
                }
                root= stack.pop();
                in.add(root.val);
                root=root.right;
            }
        }
    }
}