/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class BSTIterator{
    //TC-O(N)
    //SC-O(H)*2
    
    private Stack<TreeNode> stack= new Stack<>();
    
    boolean before= true;
    
    public BSTIterator(TreeNode root,boolean before)
    {
        this.before=before;
        pushAll(root);
    }
    
    public int next()
    {
        TreeNode node= stack.pop();
        if(before==false)
        {
            pushAll(node.right);
        }
        else
        {
            pushAll(node.left);
        }
        return node.val;
    }
    public boolean hasnext()
    {
        return !stack.isEmpty();
    }
    private void pushAll(TreeNode root)
    {
        while(root!=null)
        {
            stack.push(root);
            if(before==true)
            {
                root=root.right;
            }
            else
            {
                root=root.left;
            }
        }
    }
}
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        if(root==null)
            return false;
        
        BSTIterator left= new BSTIterator(root,false);
        BSTIterator right=new BSTIterator(root,true);
        
        int i= left.next();
        int j= right.next();
        
        while(i<j)
        {
            if(i+j== k)
                return true;
            else if( i + j > j)
            {
                j = right.next();
            }
            else
            {
                i= left.next();
            }
        }
        return false;
    }
}