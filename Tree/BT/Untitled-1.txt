//recursive + memo
class Solution
{
    //Function to find total number of unique paths.
    static int dp[][];
    public static int NumberOfPath(int a, int b) 
    {
        dp=new int[a][b];
        for(int row[]:dp)
        {
            Arrays.fill(row,-1);
        }
        return solve(a-1,b-1);
    }
    public static int solve(int n,int m)
    {
        if(n==0 && m==0)
        {
            return 1;
        }
        if(n<0 || m<0)
        {
            return 0;
        }
        if(dp[n][m] != -1)
            return dp[n][m];
        
        int up= solve(n-1,m);
        int left= solve(n,m-1);
        
        dp[n][m]=up+left;
        
        return dp[n][m];
    }
}
//tabulation
public static int solve(int n,int m)
    {
        int dp[][]= new int[n+1][m+1];
        
        for(int i=0; i<n+1; i++)
        {
            for(int j=0; j<m+1; j++)
            {
                if(i==0 && j==0)
                    dp[i][j]=1;
                else
                {
                    if(i>0)
                         up= solve(n-1,m);

                    if(j>0)
                         left= solve(n,m-1);
                    
                    dp[n][m]=up+left;
                }
            }
        }
        return dp[n-1][m-1];
    }